{-# LANGUAGE OverloadedLabels #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}

module Mintz.Hspec.Database.FixtureSpec where

import Test.Hspec
import GHC.TypeLits
import Control.Applicative
import Control.Lens hiding ((:>))
import Data.Proxy
import Data.Extensible
import Database.ORM
import Mintz.Hspec.Database.Fixture
import Mintz.Model.Models
import Mintz.Model.Types

data LabelFixture (en :: Symbol) (mb :: Symbol) (enr :: Symbol) (mbr :: Symbol)

instance (KnownSymbol en, KnownSymbol mb, KnownSymbol enr, KnownSymbol mbr) => FixtureType (LabelFixture en mb enr mbr) where
    type FixtureBase (LabelFixture en mb enr mbr) = Label
    fixture _ _ _ = pure $ Label (symbolVal (Proxy :: Proxy en))
                                 (symbolVal (Proxy :: Proxy mb))
                                 (symbolVal (Proxy :: Proxy enr))
                                 (symbolVal (Proxy :: Proxy mbr))

instance FixtureType Label where
    type FixtureBase Label = Label
    fixture _ _ _ = pure $ Label "a" "b" "c" "d"

instance FixtureType Lang where
    type FixtureBase Lang = Lang
    fixture _ _ _ = pure $ Lang "x" "y"

type PersonFixture = Person :^+ Fixture "" '[ "id" :> FixNum Integer 2
                                            , "first_name" :> LabelFixture "family" "苗字" "myouji" "みょうじ"
                                            , "display_order" :> FixNum Integer 5
                                            , "notifications" :> FixStr "notifications"
                                            ]

fixtureType #plusLength ''Integer [| \s i -> return $ toInteger (length s + i) |]

spec :: Spec
spec = do
    describe "Test fixture generation functions" $ do
        it "Generate" $ do
            p <- generateFixture (Proxy :: Proxy PersonFixture) "" 0
            getRecord p `shouldBe` ( #id @= 2 
                                  <: #first_name @= Label "family" "苗字" "myouji" "みょうじ"
                                  <: #middle_name @= Label "a" "b" "c" "d"
                                  <: #last_name @= Label "a" "b" "c" "d"
                                  <: #description @= Lang "x" "y"
                                  <: #notifications @= "notifications"
                                  <: #nickname @= Label "a" "b" "c" "d"
                                  <: #display_order @= 5
                                  <: emptyRecord
                                   )

    describe "Test fixture generation monad" $ do
        it "Generate" $ do
            ps <- runFixture $ do
                gen @PersonFixture #f 5 
            length ps `shouldBe` 5

    describe "Fixture type generated by TH" $ do
        it "TH" $ do
            ps <- runFixture $ do
                gen @(Person :^+ Fixture "" '[ "id" :> PlusLength
                                             , "display_order" :> FixNum Integer 0
                                             , "notifications" :> FixStr "notifications"
                                             ]) #abc 3
            map (view #id) ps `shouldBe` [3, 4, 5]